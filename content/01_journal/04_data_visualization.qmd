---
title: "Data Visualization"
author: "Jamila Rzayeva"
---

```{css, echo=FALSE}
body {
  color: white;
  background-color: #ffc1cc;
  font-family: Futura;
}
.list-group-item, .list-group-item.active, .list-group-item.active:focus, .list-group-item.active:hover {
  color: white;
  background-color: #ff758d;
  border-color: #white;
  border-width: 5px;
}
```
```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE,warning=FALSE, cache=TRUE)
```
<!-- Sys.setenv(LAB_KEY = "apple") -->
<!-- source("build_website.R") -->
Last compiled: `r Sys.Date()`

# Data Visulization
## Part 1: Some Super Boring Graphs
This is legit the most boring "challenge" because all of these graphs are readily available already.
```{r t4p1a, fig.height=7, fig.width=10, message=FALSE}
# Step 1: Import libraries (there are a lot of them this time)
library(tidyverse)
library(rvest)    
library(xopen)    
library(jsonlite)  
library(glue)     
library(stringi)   
library(httr)
library(ggplot2)


library(ggrepel)



library(scales)
install.packages("maps")
library(maps)

library("wesanderson") 


# Read COVID Data
covid_data_tbl <- read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")

# Actual worldwide COVID cases over time
worldwide_cases <- covid_data_tbl %>%
  
               select(continent, date, total_cases) %>%
               drop_na(continent) %>%
               group_by(date, continent) %>%
               summarise(Total = sum(total_cases, na.rm = TRUE))


# Get current case numbers for the labels
data_ends <- worldwide_cases %>% 
  group_by(continent) %>%
  filter(Total == max(Total))

# Wicked boring data you could legit just Google
worldwide_cases %>% ggplot(aes(as.Date(date), Total, color = continent)) +
                           geom_line(size = 1) +
                           theme_linedraw() +
                           scale_x_date(date_labels = "%B %Y", 
                                        date_breaks = "1 month", 
                                        expand = c(0,NA)) +
                           labs(
                                title = "Total COVID cases",
                                subtitle = "You could always just google this? "
                                ) +
                           xlab("Date") + ylab("Cumulative Cases") +
                           scale_y_continuous(labels = label_number(suffix = " M", scale = 1e-6)) +
                           theme(legend.title = element_blank(), 
                                 legend.position = "bottom", 
                                 axis.text.x = element_text(angle = 45, hjust = 1)) +
                           # Fun fact: This movie cost $5,000,000 to make (in 90's money)
                           # and was released about a year and a half before I was born
                           scale_color_manual(values = wes_palette("BottleRocket2", 
                                                                   7, 
                                                                   type = "continuous")) +
                           geom_label_repel(aes(label=Total),
                                            data=data_ends,
                                            show.legend = FALSE) 

# What you asked for (a.k.a COVID cases over time not worldwide but in select western nations)
some_rich_whites <- c("France", "Germany", "Spain", "United Kingdom", "United States")

rich_white_cases <- covid_data_tbl %>% filter(location %in% some_rich_whites) %>%
                    select(location, date, total_cases) %>%
                    add_row(worldwide_cases %>% 
                            filter(continent=="Europe") %>% 
                            rename(location = continent, 
                                   total_cases = Total))

# Get data from Europe and the US for labels
data_ends2 <- rich_white_cases %>% 
  filter(location %in% c("United States", "Europe")) %>%
  group_by(location) %>%
  filter(total_cases == max(total_cases))


# Wicked boring data you could legit just Google
rich_white_cases %>% ggplot(aes(as.Date(date), total_cases, color = location)) +
                            geom_line(size = 1) +
                            theme_bw() +
                            labs(
                                title = "COVID cases in select Westernized Nations",
                                subtitle = "How the virus impacted the yts"
                                ) +
                            xlab("Date") + ylab("Cumulative Cases") +
                            theme(legend.title = element_blank(), 
                                  legend.position = "bottom", 
                                  axis.text.x = element_text(angle = 45, hjust = 1)) +
                            scale_y_continuous(labels = label_number(suffix = " M", scale = 1e-6)) +
                            scale_x_date(date_labels = "%B %Y", 
                                         date_breaks = "1 month", 
                                         expand = c(0,NA)) +
                         # Fun fact: This film lost more than $15,000,000.
                         # It had a budget of $50M but, according to Wikipedia,
                         # only made $34.8M at the box office. 
                         scale_color_manual(values = wes_palette("Zissou1", 
                                                                 7, 
                                                                 type = "continuous")) +
                         geom_label_repel(aes(label=total_cases),
                                          data=data_ends2,
                                          show.legend = FALSE)


world <- map_data("world")

some_rich_whites["United States"] <- "USA"
some_rich_whites["United Kingdom"] <- "UK"

worldwide <- world %>%
             filter(region %in% some_rich_whites)
             
worldwide %>% ggplot(aes(x = long, y = lat, group = group)) + 
              geom_polygon(color = "white") +
              labs(
                    title = "Worldwide",
                    subtitle = "The entire world and all there is to it"
              ) +
              theme(axis.line = element_blank(), axis.text = element_blank(),
                    axis.ticks = element_blank(), axis.title = element_blank()) 


```
### Bonus Part: Something Interesting
The first part was wicked boring because you can literally just Google those graphs. Because I was so bored, I decided to do something fun in addition to the assignment. 

```{r t4p1b, fig.height=7, fig.width=10, message=FALSE}
# Data Science at TUHH ------------------------------------------------------
# That was pretty boring and pointless... let's do something interesting

# See Data Acquisition for more details
KEY <- "e8f8b27a07acd73ce972e8bab7726df9"

Schatzi <- "Wes"

ID <- GET(glue("https://api.themoviedb.org/3/search/person?api_key={KEY}&language=en-US&query={Schatzi}")) %>% 
  .$content %>% 
  rawToChar() %>% 
  fromJSON() %>% 
  as.data.frame

SchatzisID <- ID$results.id[ID$results.name=="Wes Anderson"]

Query <- "sort_by=popularity.desc&vote_count.gte=100"

db <- GET(glue("https://api.themoviedb.org/3/discover/movie?api_key={KEY}&with_crew={SchatzisID}&{Query}")) %>% 
  .$content %>% 
  rawToChar() %>% 
  fromJSON() %>%
  as.data.frame %>%
  rename_all(~stringr::str_replace(.,"^results.",""))

movieList <- t(as.vector(db['id']))

# Get the countries we care about, wrangle them, and shove them into a vector
wo_wes_war <- tibble("iso_3166_1" = NA, "name" = NA)

for (movie in movieList){
     movieTables <- GET(glue("https://api.themoviedb.org/3/movie/{movie}?api_key={KEY}")) %>%
     .$content %>% 
     rawToChar() %>% 
     fromJSON()
  
     wo_wes_war <- wo_wes_war %>% add_row(movieTables[["production_countries"]])
}

wo_wes_war <- unique(wo_wes_war) %>% na.omit()
wo_wes_war$name[wo_wes_war$name == "United States of America"] <- "United States"
wo_wes_war <- wo_wes_war$name %>% as.vector()

# The Darjeeling Limited was literally filmed in India; I don't know why it's not in the db
wo_wes_war <- c(wo_wes_war, "India")

# Get COVID data from countries of interest
cases_where_wes_was <- covid_data_tbl %>% 
                       filter(location %in% wo_wes_war) %>%
                       select(location, date, total_cases_per_million) %>%
                       drop_na(location)


# Get max cases for labels
data_ends <- cases_where_wes_was %>% 
             group_by(location) %>% 
             filter(total_cases_per_million == max(total_cases_per_million))

#wicked boring data you could legit just Google
cases_where_wes_was %>% ggplot(aes(as.Date(date), total_cases_per_million, color = location)) +
                        geom_line(size = 1) +
                        theme_minimal() +
                        labs(
                            title = "COVID cases in countries where Wes Anderson has made movies",
                            subtitle = "HE WAS HERE!!!!!"
                            ) +
                        xlab("Date") + ylab("Cumulative Cases per Million Residents") +
                        theme(legend.title = element_blank(), 
                             # legend.position = "bottom", 
                              axis.text.x = element_text(angle = 45, hjust = 1)) +
                        scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3)) +
                        scale_x_date(date_labels = "%B %Y", 
                                     date_breaks = "1 month", 
                                     expand = c(0,NA)) +
                        # Fun Fact: The studio who made the puppets for this movie,
                        # Mackinnon & Saunders, also animated the Tim Burton classic
                        # Corpse Bride. 
                        scale_color_manual(values = wes_palette("FantasticFox1", 
                                                                 7, 
                                                                 type = "continuous")) +
                        geom_label_repel(aes(label=total_cases_per_million),
                                         data=data_ends,
                                         show.legend = FALSE)
```
## Part 2: Make it into a Map
Goal: Visualize the distribution of the mortality rate (deaths / population)
```{r t4p2, fig.height=7, fig.width=10, message=FALSE}
worldwide_mortality <- covid_data_tbl %>%
                      select(location, date, total_deaths, population) %>%
                      drop_na(location) %>%
                      # There are even more countries that are incorrectly named but it 
                      # would be annoying to fix them ("A and B" would need to be split into
                      # two otherwise identical rows) and they're all very small islands
                      mutate(location = case_when(
                      location == "United Kingdom" ~ "UK",
                      location == "United States" ~ "USA",
                      location == "Czechia" ~ "Czech Republic",
                      location == "Democratic Republic of Congo" ~ "Democratic Republic of the Congo",
                      location == "Cote d'Ivoire" ~ "Ivory Coast",
                      location == "Congo" ~ "Republic of Congo",
                      TRUE ~ location )) %>% 
                      distinct() %>%
                      group_by(location) %>% 
                      filter(date == max(date)) %>%
                      mutate(death_rate = total_deaths / population) %>%
                      rename(region = location) %>%
                      left_join(world, by = "region")

install.packages("ggplot")
worldwide_mortality %>% ggplot(aes(x = long, y = lat, group = group)) + 
                        geom_polygon(aes(fill = death_rate), color = "white") +
                        labs(
                              title = "Mortality Rate Around the World (deaths / population)",
                              subtitle = "More than 3,1 million reported COVID deaths worldwide",
                              fill = "Mortality Rate (%)"
                        ) +
                        theme(axis.line = element_blank(), axis.text = element_blank(),
                              axis.ticks = element_blank(), axis.title = element_blank()) +
                        scale_fill_gradientn(na.value="white",
                                             # Fun fact: this movie is adorable, Bill Murray
                                             # is having a great time, and the sound track
                                             # slaps. Also I could not figure out how to 
                                             # scale the fill labels but I'm pretty sure 
                                             # I've done enough to pass. Mostly I was just
                                             # having fun learning about Wes Anderson films
                                             # and playing with the pretty colors. 
                                             colours = wes_palette("Zissou1", 
                                                                   21, 
                                                                   type = "continuous")) 
```
API credit: The Movie DB 
![](images/movieDBlogo.svg)

